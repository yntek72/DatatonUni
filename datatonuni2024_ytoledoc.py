# -*- coding: utf-8 -*-
"""DatatonUNI2024_Ytoledoc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wiQa-CjYv8ccUxN5JDw5gR1v2lfG5Uh5

# Exprésate Perú con Datos usando los datos abiertos de la Universidad Nacional de Ingeniería
## Datos abiertos de la Plataforma Nacional de Datos Abiertos (PNDA)
### Realizado por: Yordan Nicolas Toledo Calla
### Email: yordan.toledo.c@uni.pe
----

### 1. Cargar datos
"""

import pandas as pd
import matplotlib.pyplot as plt
import requests
import numpy as np

data = pd.read_csv('Datos_admision_2021_1_2024_1.csv', encoding='ISO-8859-1')
data

#información de la estructura de la data
data.info()

data.head()

#Numero de filas y columnas
data.shape

#Mostrar las fechas mayores al año 2023
data[data['ANIO_POSTULA'] > 2023]

#Mostrar las clificaciones mayor a 11
data[data['CALIF_FINAL'] >= 11]

#cuantos son
data[data['CALIF_FINAL'] >= 11].shape[0]

data[data['DOMICILIO_DEPA'] == 'PUNO'].shape[0]

#filtros de texto, para buscar datos por columnas
data[data['COLEGIO'].str.contains ('TRILCE LOS OLIVOS')]

#datos con errores
data.pivot_table(index=['ESPECIALIDAD'],aggfunc='count')[['COLEGIO_DEPA']]

#CORREGIR ERROR DE ESCRITURA DE LAS ESPECIALIDADES
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA MECÃNICA', 'INGENIERIA MECANICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA DE SISTEMAS', 'INGENIERIA DE SISTEMAS').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA DE TELECOMUNICACIONES', 'INGENIERIA DE TELECOMUNICACIONES').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA ELECTRÃNICA', 'INGENIERIA ELECTRONICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA CIVIL', 'INGENIERIA CIVIL').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('CIENCIA DE LA COMPUTACIÃN', 'CIENCIA DE LA COMPUTACION').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('FÃSICA', 'FISICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERIA MECANICA-ELÃCTRICA', 'INGENIERIA MECANICA-ELECTRICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA AMBIENTAL', 'INGENIERIA AMBIENTAL').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA DE CIBERSEGURIDAD', 'INGENIERIA DE CIBERSEGURIDAD').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA DE HIGIENE Y SEGURIDAD INDUSTRIAL', 'INGENIERIA DE HIGIENE Y SEGURIDAD INDUSTRIAL').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA DE MINAS', 'INGENIERIA DE MINAS').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA DE PETRÃLEO Y GAS NATURAL', 'INGENIERIA DE PETROLEO Y GAS NATURAL').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA DE SOFTWARE', 'INGENIERIA DE SOFTWARE').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA ECONÃMICA', 'INGENIERIA ECONOMICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA ELÃCTRICA', 'INGENIERIA ELECTRONICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA ESTADÃSTICA', 'INGENIERIA ESTADISTICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA FÃSICA', 'INGENIERIA FISICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA FISICA', 'INGENIERIA FISICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA GEOLÃGICA', 'INGENIERIA GEOLOGICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA INDUSTRIAL', 'INGENIERIA INDUSTRIAL').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA MECATRÃNICA', 'INGENIERIA MECATRONICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA METALÃRGICA', 'INGENIERIA METALURGICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA NAVAL', 'INGENIERIA NAVAL').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA PETROQUÃMICA', 'INGENIERIA PETROQUIMICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA QUÃMICA', 'INGENIERIA QUIMICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA SANITARIA', 'INGENIERIA SANITARIA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('INGENIERÃA TEXTIL', 'INGENIERIA TEXTIL').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('MATEMÃTICA', 'MATEMATICA').str.strip()
data['ESPECIALIDAD'] = data.ESPECIALIDAD.str.replace('QUÃMICA', 'QUIMICA').str.strip()

#ERRORES CORREGIDOS DE LAS ESPECIALIDADES
data.pivot_table(index=['ESPECIALIDAD'],aggfunc='count')[['IDHASH']]

#VER ERROR EN DATOS DE COLUMNA MODALIDADES DE INGRESO
data.pivot_table(index=['MODALIDAD'],aggfunc='count')[['INGRESO']]

#CORREGIR ERROR DE ESCRITURA EN MODALIDAD
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO - VÃCTIMA DEL TERRORISMO (iniciar estudios)', 'EXTRAORDINARIO - VICTIMA DEL TERRORISMO (iniciar estudios)').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO 1 - CONVENIO ANDRÃS BELLO (continuar estudios)', 'EXTRAORDINARIO 1 - CONVENIO ANDRES BELLO (continuar estudios)').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO 1 - CONVENIO ANDRÃS BELLO (iniciar estudios)', 'EXTRAORDINARIO 1 - CONVENIO ANDRES BELLO (iniciar estudios)').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO 1 - VÃCTIMA DEL TERRORISMO (iniciar estudios)', 'EXTRAORDINARIO 1 - VICTIMAS DEL TERRORISMO (iniciar estudios)').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - VICTIMAS DEL TERRORISMO (iniciar estudios)', 'EXTRAORDINARIO 1 - VICTIMAS DEL TERRORISMO (iniciar estudios)').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - DOS PRIMEROS ALUMNOS', 'EXTRAORDINARIO 1 - DOS PRIMEROS ALUMNOS').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - TRASLADO EXTERNO', 'EXTRAORDINARIO 1 - TRASLADO EXTERNO').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - TITULADO O GRADUADO UNI', 'EXTRAORDINARIO 1 - TITULADO O GRADUADO UNI').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - DIPLOMADOS CON BACHILLERATO', 'EXTRAORDINARIO 1 - DIPLOMADOS CON BACHILLERATO').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - PERSONAS CON DISCAPACIDAD (iniciar estudios)', 'EXTRAORDINARIO 1 - PERSONAS CON DISCAPACIDAD (iniciar estudios)').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - TRASLADO EXTERNO PARA ESTUDIANTES PROVENIENTES DE UNIVERSIDADES NO LICENCIADAS', 'EXTRAORDINARIO 1 - TRASLADO EXTERNO PARA ESTUDIANTES PROVENIENTES DE UNIVERSIDADES NO LICENCIADAS').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - CONVENIO ANDRES BELLO (continuar estudios)', 'EXTRAORDINARIO 1 - CONVENIO ANDRES BELLO (continuar estudios)').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - DEPORTISTAS CALIFICADOS DE ALTO NIVEL( Iniciar estudios)', 'EXTRAORDINARIO 1 - DEPORTISTAS CALIFICADOS DE ALTO NIVEL( Iniciar estudios)').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO 2 â INGRESO DIRECTO CEPRE', 'EXTRAORDINARIO 2 - INGRESO DIRECTO CEPRE').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO2 â INGRESO DIRECTO CEPRE', 'EXTRAORDINARIO 2 - INGRESO DIRECTO CEPRE').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - CONVENIO ANDRES BELLO (iniciar estudios)', 'EXTRAORDINARIO 1 - CONVENIO ANDRES BELLO (iniciar estudios)').str.strip()
data['MODALIDAD'] = data.MODALIDAD.str.replace('EXTRAORDINARIO1 - VICTIMAS DEL TERRORISMO (continuar estudios)', 'EXTRAORDINARIO 1 - VICTIMAS DEL TERRORISMO (continuar estudios)').str.strip()

#CORRECCION DE ERROR EN COLUMNA MODALIDADES

data.pivot_table(index=['MODALIDAD'],aggfunc='count')[['INGRESO']]

# Buscar datos duplicados en la columna 'ID'
data_2021 =data[(data['ANIO_POSTULA'] == 2021)]

duplicados = data_2021[data_2021.duplicated('IDHASH', keep=False)]

# Mostrar los duplicados
if not duplicados.empty:
    print("Datos duplicados encontrados en la columna 'IDHASH':")
    print(duplicados.to_string(index=False))
else:
    print("No se encontraron datos duplicados en la columna 'IDHASH'.")

duplicados.shape

#contabilizar numero postulantes por año
#se consideró la columna INGRESO ya que muestra los datos de ingresantes y no ingresantes, siento el total de postulantes
data.groupby('ANIO_POSTULA')[['INGRESO']].count()

data.groupby('ANIO_POSTULA')[['CALIF_FINAL']].count().plot()

data.pivot_table(index=['ANIO_POSTULA', 'ESPECIALIDAD'],aggfunc='count')[['CALIF_FINAL']]

data_2021 =data[(data['ANIO_POSTULA'] == 2021)]
data_2021.pivot_table(index=['ANIO_POSTULA', 'ESPECIALIDAD'],aggfunc='count')[['INGRESO']].plot(kind='bar',figsize=(16,10), grid=True)

#plt.savefig('grafico_ESPECIALIDAD_POSTULANTES.jpg', bbox_inches='tight', dpi=300)

"""### 1. Número de postulantes e Ingresantes por modalidad 2021"""

#INGRESANTES POR MODALIDAD DE INGRESO

import pandas as pd
import matplotlib.pyplot as plt
data_2021 =data[(data['ANIO_POSTULA'] == 2021)]
# Filtrar las calificaciones mayores o iguales a 11
df_INGRESO = data_2021[data_2021['INGRESO'] == 'SI']

df_CALIF = data_2021[data_2021['CALIF_FINAL'] >= 11]


# Contar la cantidad de calificaciones por especialidad
especialidad_counts = df_INGRESO['MODALIDAD'].value_counts()
especialidad_counts

#CANTIDAD DE POSTULANTES POR MODALIDAD DE INGRESO
data_2021 = data[(data['ANIO_POSTULA'] == 2021)]
pivot_data = data_2021.pivot_table(index=['MODALIDAD'], aggfunc='count')[['INGRESO']]
pivot_data_sorted = pivot_data.sort_values(by='INGRESO', ascending=False)
pivot_data_sorted

#INGRESANTES POR MODALIDAD DE INGRESO
data_2021 =data[(data['ANIO_POSTULA'] == 2021)]
# Filtrar las calificaciones mayores o iguales a 11
df_INGRESO = data_2021[data_2021['INGRESO'] == 'SI']
df_CALIF = data_2021[data_2021['CALIF_FINAL'] >= 11]
# Contar la cantidad de calificaciones por modalidad de ingreso
especialidad_counts = df_INGRESO['MODALIDAD'].value_counts()


#CANTIDAD DE POSTULANTES POR MODALIDAD DE INGRESO
data_2021 = data[(data['ANIO_POSTULA'] == 2021)]
pivot_data = data_2021.pivot_table(index=['MODALIDAD'], aggfunc='count')[['INGRESO']]
pivot_data_sorted = pivot_data.sort_values(by='INGRESO', ascending=False)
###############
#tabla combinada con las columnas ['MODALIDAD', 'INGRESO', 'COUNT']
tabla_combinada = pd.merge(pivot_data_sorted, especialidad_counts, on='MODALIDAD')
print(tabla_combinada)


plt.show()

"""### 2. INGRESANTES POR ESPECIALIDAD DE INGRESO"""

#POSTULANTES POR ESPECIALIDAD AÑO 2021

data_2021 = data[(data['ANIO_POSTULA'] == 2021)]
pivot_data = data_2021.pivot_table(index=['ESPECIALIDAD'], aggfunc='count')[['INGRESO']]
pivot_data_sorted = pivot_data.sort_values(by='INGRESO', ascending=False)
pivot_data_sorted

#INGRESANTES POR ESPECIALIDAD DE INGRESO

data_2021 =data[(data['ANIO_POSTULA'] == 2021)]
# Filtrar los valores de ingresantes = SI
df_INGRESO = data_2021[data_2021['INGRESO'] == 'SI']

#df_CALIF = data_2021[data_2021['CALIF_FINAL'] >= 12]
especialidad_counts = df_INGRESO['ESPECIALIDAD'].value_counts()
especialidad_counts

#INGRESANTES POR ESPECIALIDAD DE INGRESO
data_2021 =data[(data['ANIO_POSTULA'] == 2021)]
# Filtrar las calificaciones mayores o iguales a 11
df_INGRESO = data_2021[data_2021['INGRESO'] == 'SI']
df_CALIF = data_2021[data_2021['CALIF_FINAL'] >= 11]
# Contar la cantidad de calificaciones por especialidad
especialidad_counts = df_INGRESO['ESPECIALIDAD'].value_counts()


#CANTIDAD DE POSTULANTES POR ESPECIALIDAD DE INGRESO
data_2021 = data[(data['ANIO_POSTULA'] == 2021)]
pivot_data = data_2021.pivot_table(index=['ESPECIALIDAD'], aggfunc='count')[['INGRESO']]
pivot_data_sorted = pivot_data.sort_values(by='INGRESO', ascending=False)
###############
#tabla combinada con las columnas ['ESPECIALIDAD', 'INGRESO', 'COUNT']
tabla_combinada = pd.merge(pivot_data_sorted, especialidad_counts, on='ESPECIALIDAD')
print(tabla_combinada)

plt.show()

#CANTIDAD DE INGRESANTES POR ESPECIALIDAD
df_filtered = data_2021[data_2021['INGRESO'] == 'SI']
especialidad_counts = df_filtered['ESPECIALIDAD'].value_counts()

plt.figure(figsize=(20, 10))

plt.figure(figsize=(20, 10))
ax = especialidad_counts.plot(kind='bar', color='blue')
ax.bar_label(ax.containers[0]),

plt.title('CANTIDAD DE INGRESANTES POR ESPECIALIDAD 2021')
plt.xlabel('ESPECIALIDAD')
plt.ylabel('INGRESANTES')
plt.xticks(rotation=90, ha='right')
plt.grid(axis='y')
#plt.savefig('grafico_ESPECIALIDAD_ingreso.jpg', bbox_inches='tight', dpi=300)
plt.show()

#postulantes por especialidad y sexo
data_2021 =data[(data['ANIO_POSTULA'] == 2021)]

data_2021.pivot_table(index=['ESPECIALIDAD', 'SEXO'],aggfunc='count')[['INGRESO']]

#POSTULANTES POR ESPECIALIDAD AÑO 2021
index = range(len(df_2021['ESPECIALIDAD']))

ax = data_2021.pivot_table(index=['ESPECIALIDAD', 'SEXO'], aggfunc='count')[['INGRESO']]
# Separar los datos por sexo
femenino = ax.xs('FEMENINO', level='SEXO')  # Filtrar por Femenino
masculino = ax.xs('MASCULINO', level='SEXO')  # Filtrar por Masculino

fig, ax = plt.subplots(figsize=(20,15))
femenino['INGRESO'].plot(grid=True, kind='bar', ax=ax, position=1, width=0.4, color='red', label='Femenino')
ax.bar_label(ax.containers[0]);
masculino['INGRESO'].plot(grid=True, kind='bar', ax=ax, position=0, width=0.4, color='blue', label='Masculino')
ax.bar_label(ax.containers[1]);

plt.title('POSTULANTES SEGÚN SEXO')
plt.xlabel('Especialidades')
plt.ylabel('Cantidad postulantes')
ax.legend()

ax.set_yscale('linear')
plt.tight_layout()
#plt.savefig('grafico_ESPECIALIDAD_SEXO_ingreso.jpg', bbox_inches='tight', dpi=300)
plt.show()

"""### 3. POSTULANTES POR SEXO E INGRESANTES"""

#postulantes por sexo 2021
pivot_data = data_2021.pivot_table(index='SEXO', values='INGRESO', aggfunc='count')

#ingresantes - 'SI'
ingreso_si = data_2021[data_2021['INGRESO'] == 'SI'].pivot_table(index='SEXO', values='INGRESO', aggfunc='count')

tabla_combinada = pd.merge(pivot_data, ingreso_si, on='SEXO', suffixes=('_TOTAL', '_SI'))
tabla_combinada.columns = ['POSTULANTES', 'INGRESANTES']
print(tabla_combinada)

"""### 3.1 Postulantes por modalidad de ingreso y sexo"""

data_2021 =data[(data['ANIO_POSTULA'] == 2021)]

data_2021.pivot_table(index=['MODALIDAD', 'SEXO'],aggfunc='count')[['INGRESO']]

#postulntes por modalidad y sexo año 2021
ax = data_2021.pivot_table(index=['MODALIDAD', 'SEXO'], aggfunc='count')[['INGRESO']].plot(kind='bar', figsize=(14,10))

ax.bar_label(ax.containers[0])
ax.legend(loc='center left', bbox_to_anchor=(-0.2, 0.5))

#plt.savefig('grafico_modalidad_sexo_ingreso.jpg', bbox_inches='tight', dpi=300)
plt.show()

"""### CANTIDAD DE POSTULANTES POR DEPARTAMENTO 2021-2024"""

ax = data.groupby('DOMICILIO_DEPA')[['INGRESO']].count().plot(kind='bar', figsize=(16,6), xlabel='DEPARTAMENTO', ylabel='Cantidad', title='CANTIDAD DE POSTULANTES 2021-2024')
ax.bar_label(ax.containers[0]);  #para poner cantidad encima de cada barra

#CANTIDAD DE POSTULANTES EN EL AÑO 2021 EN LIMA POR ESPECIALIDAD

ax = data[data['DOMICILIO_DEPA'] == 'LIMA'].groupby('ESPECIALIDAD')[['INGRESO']].count().plot(kind='bar', figsize=(16,10), xlabel='ESPECIALIDADES', ylabel='Cantidad de postulantes',
                                                                title='CANTIDAD DE POSTULANTES EN LIMA 2021-2024', grid=True)
plt.xticks(rotation=45, ha='right')  #para rotar las etiquetas y alinearlas a la derecha
plt.tight_layout()

ax.bar_label(ax.containers[0]);
#plt.savefig('grafico_POSTULANTES_LIMA_ingreso.jpg', bbox_inches='tight', dpi=300)

ax = data[data['DOMICILIO_DEPA'] == 'LIMA'].groupby('ESPECIALIDAD')[['INGRESO']].count().plot(kind='barh', figsize=(16,10), xlabel='Cantidad de postulantes', ylabel='Especialidades',
                                                                title='CANTIDAD DE POSTULANTES EN LIMA 2021-2024', grid=True)
plt.xticks(rotation=45, ha='right')  #para rotar las etiquetas y alinearlas a la derecha
plt.tight_layout()

ax.bar_label(ax.containers[0]);
plt.savefig('grafico_LIMA hOR_ingreso.jpg', bbox_inches='tight', dpi=300)

#cantidad de postulantes por sexo
ax = data_2021.pivot_table(index=['ESPECIALIDAD', 'SEXO'], aggfunc='count')[['INGRESO']]
ax

"""### ANALISIS DE DATOS, REALIZANDO PROYECCION DE INGRESANTES DE MUJERES EN LA UNI"""

#postulantes por sexo 2021
data_2021 =data[(data['ANIO_POSTULA'] == 2021)]

pivot_data = data_2021.pivot_table(index='SEXO', values='INGRESO', aggfunc='count')
#ingresantes - 'SI'
ingreso_si = data_2021[data_2021['INGRESO'] == 'SI'].pivot_table(index='SEXO', values='INGRESO', aggfunc='count')

tabla_combinada = pd.merge(pivot_data, ingreso_si, on='SEXO', suffixes=('_TOTAL', '_SI'))
tabla_combinada.columns = ['POSTULANTES', 'INGRESANTES']
print(tabla_combinada)

#postulantes por sexo 2022
data_2022 =data[(data['ANIO_POSTULA'] == 2022)]
pivot_data = data_2022.pivot_table(index='SEXO', values='INGRESO', aggfunc='count')
#ingresantes - 'SI'
ingreso_si = data_2022[data_2022['INGRESO'] == 'SI'].pivot_table(index='SEXO', values='INGRESO', aggfunc='count')

tabla_combinada = pd.merge(pivot_data, ingreso_si, on='SEXO', suffixes=('_TOTAL', '_SI'))
tabla_combinada.columns = ['POSTULANTES', 'INGRESANTES']
print(tabla_combinada)

#postulantes por sexo 2023
data_2023 =data[(data['ANIO_POSTULA'] == 2023)]
pivot_data = data_2023.pivot_table(index='SEXO', values='INGRESO', aggfunc='count')
#ingresantes - 'SI'
ingreso_si = data_2023[data_2023['INGRESO'] == 'SI'].pivot_table(index='SEXO', values='INGRESO', aggfunc='count')

tabla_combinada = pd.merge(pivot_data, ingreso_si, on='SEXO', suffixes=('_TOTAL', '_SI'))
tabla_combinada.columns = ['POSTULANTES', 'INGRESANTES']
print(tabla_combinada)

#postulantes por sexo 2024
data_2024 =data[(data['ANIO_POSTULA'] == 2024)]
pivot_data = data_2024.pivot_table(index='SEXO', values='INGRESO', aggfunc='count')
#ingresantes - 'SI'
ingreso_si = data_2024[data_2024['INGRESO'] == 'SI'].pivot_table(index='SEXO', values='INGRESO', aggfunc='count')

tabla_combinada = pd.merge(pivot_data, ingreso_si, on='SEXO', suffixes=('_TOTAL', '_SI'))
tabla_combinada.columns = ['POSTULANTES', 'INGRESANTES']
print(tabla_combinada)

from sklearn.linear_model import LinearRegression

# Datos iniciales de la tabla
data = {'SEXO': ['FEMENINO'],
        'INGRESO2021': [243],
        'INGRESO2022': [363],
        'INGRESO2023': [322],
        'INGRESO2024': [309]}

df = pd.DataFrame(data)
#para realizar la regresion se considero para el año 2024 el valor de 309,
#siendo el promedio de ingreso de mujeres de los años 2021-2023, ya que no se tiene a la fecha el valor total del año 2024

years = np.array([2021, 2022, 2023, 2024]).reshape(-1, 1)
ingresos = np.array([df['INGRESO2021'][0], df['INGRESO2022'][0], df['INGRESO2023'][0], df['INGRESO2024'][0]])

#regresión lineal
model = LinearRegression()
model.fit(years, ingresos)

#coeficiente de determinación R²
r_squared = model.score(years, ingresos)
print(f"Coeficiente de determinación (R²): {r_squared:.4f}")

# Hacer predicciones para los próximos 2 y 5 años (2026 y 2029)
future_years = np.array([2026, 2029]).reshape(-1, 1)
future_predictions = model.predict(future_years)
for year, prediction in zip([2026, 2029], future_predictions):
    print(f"Proyección para {year}: {prediction:.2f} ingresantes")

plt.figure(figsize=(10, 6))
plt.scatter(years, ingresos, color='blue', label='Datos actuales', zorder=5)
plt.plot(years, model.predict(years), color='green', label='Línea de tendencia actual')
plt.scatter(future_years, future_predictions, color='red', label='Proyecciones futuras', zorder=5)

plt.title('Proyección de Ingresos de mujeres por Año')
plt.xlabel('Año')
plt.ylabel('Ingresos')
plt.grid(True)
plt.legend()
plt.savefig('proyeccion_ingresos.jpg', bbox_inches='tight', dpi=300)
plt.show()